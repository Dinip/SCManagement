@model SCManagement.Controllers.MyZoneController.MyZoneModel
@inject IStringLocalizer<SharedResource> StringLocalizer
@inject IHtmlLocalizer<SharedResource> HtmlLocalizer

@{
    ViewData["Title"] = @StringLocalizer["MyZone"];
    string cultureInfo = Thread.CurrentThread.CurrentCulture.Name;
}

<style>

    .vis-label {
        background-color: #00639A;
    }

    .vis-timeline {
        border-radius: 10px;
    }

    .vis-inner {
        color: white;
    }

    .mdCard {
        min-height: none !important;
        height: auto !important;
    }

    .vis-rolling-mode-btn {
        visibility: visible !important;
    }

    .vis-group-level-0 {
        display: flex;
        justify-content: center;
        align-items: center;
        max-width: 100px;
        text-align: center;
    }

</style>

<div class="container-fluid">
    <h1 style="margin-top:130px !important; margin-left:3%" class="text-to-dark">@StringLocalizer["MyZone"]</h1>
    <div id="modal" class="modal">
        <div class="modal-content" style="margin-top:7%; margin-bottom:0; min-height:70%">
            <span onclick="$('#modal').hide()" class="close">&times;</span>
            <iframe id="frame" src="@(Model.EMDUrl.Equals($"{@StringLocalizer["Pending_Add"]}") ? "" : Model.EMDUrl)" title="EMD" frameborder="0" style="overflow:hidden;height:600px;width:100%"></iframe>
        </div>
    </div>

    <div id="modal1" class="modal">
        <div class="modal-content" style="margin-top:20%; margin-bottom:0; max-height:20%; max-width:20%">
            <span class="text-to-dark">@StringLocalizer["Are u sure you want to delete?"]</span>
            <div class="d-flex justify-content-end mt-3">
                <button onclick="$('#modal1').hide()" style="color:white; border-radius: 10px; background-color: #00639A; border-color: #00639A; margin-right:3%;">@StringLocalizer["Cancel"]</button>
                <button onclick="removeFile('image')" style="color:white; border-radius: 10px; background-color: red; border-color: red;">@StringLocalizer["Remove"]</button>
            </div>
        </div>
    </div>

    <div class="d-md-flex">
        <div class="p-5 col-md-6 col-12">
            <h2 class="text-to-dark">@StringLocalizer["Teams"]</h2>
            <div class="card mt-3 shadow" style="border-radius:20px;min-height:290px;">
                <div class="card-body">
                    <div class="table-responsive" style="width: 100%; overflow-y: auto;">
                        <table id="table_id1" class="display" style="width:100%!important;">
                            <thead>
                                <tr class="text-to-dark">
                                    <th class="col-lg-6 col-md-6 col-sm-6 col-xs-6 fs-5" style="padding: 0 10px;">
                                        @StringLocalizer["Teams"]
                                    </th>
                                    <th class="col-lg-6 col-md-6 col-sm-6 col-xs-6 fs-5" style="padding: 0 10px;">
                                        @StringLocalizer["Modality"]
                                    </th>
                                </tr>
                            </thead>
                            <tbody>
                                @if (Model.Teams != null)
                                {
                                    @foreach (var team in Model.Teams)
                                    {
                                        <tr class="text-to-dark">
                                            <td class="mt-3 col-lg-6 col-md-6 col-sm-6 col-xs-6 align-middle" style="padding: 0 10px;">
                                                @Html.DisplayFor(modelItem => team.Name) (@team.Club.Name)
                                            </td>
                                            <td class="mt-3 col-lg-6 col-md-6 col-sm-6 col-xs-6 align-middle" style="padding: 0 10px;">
                                                @Html.DisplayFor(modelItem => team.Modality.ModalityTranslations.Where(m => m.Language == cultureInfo).First().Value)
                                            </td>
                                        </tr>
                                    }
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>

        <div class="p-5 col-md-6 col-12">
            <div class="d-md-flex justify-content-between align-items-center">
                <h2 class="text-to-dark">@StringLocalizer["Goals"]</h2>
                <div class="d-flex flex-wrap align-items-center">
                    <input type="radio" id="filterGoalsPlans2" name="filterTrainingPlans" onclick="GetGoalPlans(2)" />
                    <label for="filterGoalsPlans2" class="text-to-dark">@StringLocalizer["Finished"]</label>

                    <input type="radio" id="filterGoalsPlans0" name="filterTrainingPlans" onclick="GetGoalPlans(3)" class="ms-3" />
                    <label for="filterGoalsPlans0" class="text-to-dark">@StringLocalizer["All"]</label>

                    <input type="radio" id="filterGoalsPlans1" name="filterTrainingPlans" onclick="GetGoalPlans(1)" class="ms-3" />
                    <label for="filterGoalsPlans1" class="text-to-dark">@StringLocalizer["Pending"]</label>

                    <button onclick="ClearFilterGoals()" style="color:white !important; border-radius: 10px; padding: 6px 12px; background-color: #00639A; border-color: #00639A; text-decoration:none; cursor:pointer;" class="btn ms-3">@StringLocalizer["Clear"]</button>
                </div>
            </div>
            <div class="card mt-3 shadow" style="border-radius:20px; min-height:280px;">
                <div class="card-body">
                    <div class="table-responsive" style="width: 100%; overflow-y: auto;">
                        <table id="table_id5" class="display" style="width:100%!important;">
                            <thead>
                                <tr class="text-to-dark">
                                    <th class="col-lg-3 col-md-3 col-sm-3 col-xs-3 fs-5" style="padding: 0 10px;">
                                        @StringLocalizer["Name"]
                                    </th>
                                    <th class="col-lg-3 col-md-3 col-sm-3 col-xs-3 fs-5" style="padding: 0 10px;">
                                        @StringLocalizer["EndDate"]
                                    </th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>


    <div class="row col-12 p-5 flex-wrap">
        <div class="d-md-flex justify-content-between align-items-center">
            <h2 class="text-to-dark">@StringLocalizer["FoodPlan"]</h2>
            <div>
                <input type="radio" id="filterMealPlans2" name="filterTrainingPlans" onclick="GetMealPlans(2)" />
                <label for="filterMealPlans2" class="text-to-dark">@StringLocalizer["Finished"]</label>

                <input type="radio" id="filterMealPlans0" name="filterTrainingPlans" onclick="GetMealPlans(0)" />
                <label for="filterMealPlans0" class="text-to-dark">@StringLocalizer["InProgress"]</label>

                <input type="radio" id="filterMealPlans1" name="filterTrainingPlans" onclick="GetMealPlans(1)" />
                <label for="filterMealPlans1" class="text-to-dark">@StringLocalizer["Futures"]</label>

            </div>
        </div>
        <div class="card mt-3 shadow" style="border-radius:20px; min-height:280px;">
            <div class="card-body d-flex flex-column text-to-dark">
                <div class="table-responsive" style="width: 100%; max-height: 100%; overflow-y: auto;">
                    <table id="table_id3" class="display" style="width:100%!important;">
                        <thead>
                            <tr class="text-to-dark">
                                <th class="col-lg-4 col-md-4 col-sm-4 col-xs-4 fs-5" style="padding: 0 10px;">
                                    @StringLocalizer["Name"]
                                </th>
                                <th class="col-lg-4 col-md-4 col-sm-4 col-xs-4 fs-5" style="padding: 0 10px;">
                                    @StringLocalizer["Description"]
                                </th>
                                <th class="col-lg-4 col-md-4 col-sm-4 col-xs-4 fs-5" style="padding: 0 10px;">
                                    @StringLocalizer["Trainer"]
                                </th>
                                <th class="col-lg-3 col-md-3 col-sm-3 col-xs-3 fs-5" style="padding: 0 10px;"></th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>

    <div class="row col-12 p-5">
        <div class="d-md-flex justify-content-between align-items-center">
            <h2 class="text-to-dark">@StringLocalizer["ActiveTrainingPlan"]</h2>
            <div>
                <input type="radio" id="filterTrainingPlans2" name="filterTrainingPlans" onclick="GetTrainingPlans(2)" />
                <label for="filterTrainingPlans2" class="text-to-dark">@StringLocalizer["Finished"]</label>

                <input type="radio" id="filterTrainingPlans0" name="filterTrainingPlans" onclick="GetTrainingPlans(0)" />
                <label for="filterTrainingPlans0" class="text-to-dark">@StringLocalizer["InProgress"]</label>

                <input type="radio" id="filterTrainingPlans1" name="filterTrainingPlans" onclick="GetTrainingPlans(1)" />
                <label for="filterTrainingPlans1" class="text-to-dark">@StringLocalizer["Futures"]</label>
            </div>
        </div>

        <div class="card mt-3 shadow" style="height:100% !important; min-height:280px;  border-radius:20px;">
            <div class="card-body d-flex flex-column text-to-dark">
                <div class="table-responsive" style="width: 100%; max-height: 300px; overflow-y: auto;">
                    <table id="table_id2" class="display" style="width:100%!important;">
                        <thead>
                            <tr class="text-to-dark">
                                <th class="col-lg-3 col-md-3 col-sm-3 col-xs-3 fs-5" style="padding: 0 10px;">
                                    @StringLocalizer["Modality"]
                                </th>
                                <th class="col-lg-3 col-md-3 col-sm-3 col-xs-3 fs-5" style="padding: 0 10px;">
                                    @StringLocalizer["Name"]
                                </th>
                                <th class="col-lg-3 col-md-3 col-sm-3 col-xs-3 fs-5" style="padding: 0 10px;">
                                    @StringLocalizer["Description"]
                                </th>
                                <th class="col-lg-3 col-md-3 col-sm-3 col-xs-3 fs-5" style="padding: 0 10px;">
                                    @StringLocalizer["Trainer"]
                                </th>
                                <th class="col-lg-3 col-md-3 col-sm-3 col-xs-3 fs-5" style="padding: 0 10px;"></th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>
            </div>
        </div>
    </div>
    <div class="row col-12 p-5 flex-wrap">
        <h2 class="text-to-dark">@StringLocalizer["TimeLine"]</h2>
        <div class="card mt-3 shadow p-0" style="height:100% !important; border-radius:20px;">
            <div id="cardSize" class="card-body d-flex flex-column text-to-dark" style="height:100% !important;">
                <div id="timeline" style="width:100% !important; height:100% !important;"></div>
            </div>
        </div>
    </div>


    <div class="row col-12 p-5 flex-wrap">
        <div class="d-md-flex justify-content-between align-items-center">
            <h2 class="text-to-dark mb-3">@StringLocalizer["Bio"]</h2>
            <div>
                <a asp-action="CreateBioimpedance" style="color:white !important; border-radius: 10px; padding: 6px 12px; background-color: #00639A; border-color: #00639A; text-decoration:none; cursor:pointer;" class="ms-5">@StringLocalizer["CreateBioimpedance"]</a>
            </div>
        </div>
        <div class="card mt-3 shadow" style="height:100% !important;min-height:280px;  border-radius:20px;">
            <div class="card-body d-flex flex-column text-to-dark">
                <div class="table-responsive" style="width: 100%; max-height: 300px; overflow-y: auto;">
                    <table id="table_id4" class="display" style="width:100%!important;">
                        <thead>
                            <tr class="text-to-dark">
                                <th class="w-auto" style="padding: 0 10px;">
                                    @StringLocalizer["Height"]
                                </th>
                                <th class="w-auto" style="padding: 0 10px;">
                                    @StringLocalizer["Weight"]
                                </th>
                                <th class="w-auto" style="padding: 0 10px;">
                                    @StringLocalizer["FatMass"]
                                </th>
                                <th class="w-auto" style="padding: 0 10px;">
                                    @StringLocalizer["LeanMass"]
                                </th>
                                <th class="w-auto" style="padding: 0 10px;">
                                    @StringLocalizer["MuscleMass"]
                                </th>
                                <th class="w-auto" style="padding: 0 10px;">
                                    @StringLocalizer["ViceralFat"]
                                </th>
                                <th class="w-auto" style="padding: 0 10px;">
                                    @StringLocalizer["BasalMetabolism"]
                                </th>
                                <th class="w-auto" style="padding: 0 10px;">
                                    @StringLocalizer["Hydration"]
                                </th>
                                <th class="w-auto" style="padding: 0 10px;">
                                    @StringLocalizer["LastUpdateDate"]
                                </th>
                            </tr>
                        </thead>
                        <tbody>
                        </tbody>
                    </table>
                </div>

            </div>
        </div>
    </div>

    <div class="row col-12 p-5 flex-wrap">
        <div style="width: 100%;">
            
            <div class="d-md-flex justify-content-between">
                <h2 class="text-to-dark">@StringLocalizer["MD"]</h2>
                <div>
                    <form asp-action="MyZoneEMDUpdate" method="post" enctype="multipart/form-data">
                        <input id="selectedFileForEMD" asp-for="FileEMD" type="file" hidden class="form-control" accept="application/pdf" onchange="handleUpload(this, 'pdf')" />
                        <button id="saveInsertEmd" type="submit" style="display:none">@StringLocalizer["Save"]</button>
                    </form>

                    <i id="emd" class="fa-solid fa-file fa-xl text-to-dark @(!Model.EMDUrl.Equals($"{@StringLocalizer["Pending_Add"]}") ? "" : "invisible")" onclick="toggleModal()"></i>

                    <span id="emdText" style="margin-right:20px;" class="text-to-dark">@(!Model.EMDUrl.Equals($"{@StringLocalizer["Pending_Add"]}") ? "" : $"{@StringLocalizer["Empty"]}")</span>

                    <i id="btnRemoveEMD" title=@StringLocalizer["Remove EMD"] class="fa-solid fa-xl fa-trash @(!Model.EMDUrl.Equals($"{@StringLocalizer["Pending_Add"]}") ? "" : "invisible")"
                       style="color:red; cursor:pointer; margin-right:20px;" onclick="removeFile('pdf')"></i>
                    <i class="fa-solid fa-xl fa-pen-to-square text-to-dark" onclick="document.getElementById('selectedFileForEMD').click()" style="cursor:pointer;" title=@StringLocalizer["Change EMD"]></i>
                </div>
            </div>
        </div>
        <hr />
        <div>
            <input id="removeEMD" asp-for="RemoveEMD" type="hidden" />
        </div>
    </div>
</div>

<script type="text/javascript" charset="utf8" src="/lib/jquery/dist/jquery.js"></script>
<script type="text/javascript" charset="utf8" src="/lib/DataTables/DataTables-1.13.3/js/jquery.dataTables.js"></script>
<script type="text/javascript" charset="utf8" src="/lib/DataTables/Responsive-2.4.0/js/dataTables.responsive.js"></script>
<script type="text/javascript" charset="utf8" src="/lib/DataTables/datatables.min.js"></script>
<link href="https://unpkg.com/vis-timeline@latest/styles/vis-timeline-graph2d.min.css" rel="stylesheet" type="text/css" />
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment-with-locales.min.js"></script>
<script type="text/javascript" src="https://unpkg.com/vis-timeline@latest/standalone/umd/vis-timeline-graph2d.min.js"></script>

<script type="text/javascript">
    var strings = {
        "details": '@Html.Raw(StringLocalizer["Details"].Value.ToString())',
    }

    $(document).ready(async function () {
        $.noConflict();

        teamsTable()
        bioimpedanceTable()

        GetTrainingPlans()
        GetMealPlans()
        GetGoalPlans()

        setTheme(localStorage.getItem("theme") || "light")

        buildTimeline()

    });

    function teamsTable() {
        $("#table_id1").DataTable({
            responsive: true,
            "searching": false,
            "ordering": false,
            "paging": false,
            "dom": 't',
            "info": false,
            language: {
                "lengthMenu": "@StringLocalizer["Show"] _MENU_ @StringLocalizer["EntriesDatatable"]",
                "emptyTable": "@StringLocalizer["EmptyMessage"]",
                "search": "@StringLocalizer["Search"]",
                "zeroRecords": "@StringLocalizer["NoMatching"]",
                "processing": "@StringLocalizer["Processing"]",
                "infoFiltered": "(@StringLocalizer["Filtered"] @StringLocalizer["From"] _MAX_ total @StringLocalizer["EntriesDatatable"])",
                "info": "@StringLocalizer["Showing"] _START_ @StringLocalizer["To"] _END_ @StringLocalizer["OfDatatable"] _TOTAL_ @StringLocalizer["EntriesDatatable"]",
                "infoEmpty": "@StringLocalizer["Showing"] 0 @StringLocalizer["OfDatatable"] 0 @StringLocalizer["EntriesDatatable"]",
                "paginate": {
                    first: "@StringLocalizer["First"]",
                    last: "@StringLocalizer["Last"]",
                    next: "@StringLocalizer["Next"]",
                    previous: "@StringLocalizer["Previous"]",
                },
            },
        });

    }

    function bioimpedanceTable() {
        $("#table_id4").DataTable({
            ajax: {
                url: "/MyZone/GetBioimpedance",
                type: "GET",
                dataType: "json",
            },
            columns: [
                { "data": "height" },
                { "data": "weight" },
                { "data": "fatMass" },
                { "data": "leanMass" },
                { "data": "muscleMass" },
                { "data": "viceralFat" },
                { "data": "basalMetabolism" },
                { "data": "hydration" },
                {
                    "data": "lastUpdateDate",
                    "render": function (data, type, row, meta) {
                        if (type === 'display') {
                            const date = new Date(data);
                            const formattedDate = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
                            return formattedDate;
                        } else {
                            return data;
                        }
                    }
                }
            ],
            destroy: true,
            responsive: true,
            "searching": false,
            "ordering": false,
            "paging": false,
            "dom": 't',
            "info": false,
            language: {
                "lengthMenu": "@StringLocalizer["Show"] _MENU_ @StringLocalizer["EntriesDatatable"]",
                "emptyTable": "@StringLocalizer["EmptyMessage"]",
                "search": "@StringLocalizer["Search"]",
                "zeroRecords": "@StringLocalizer["NoMatching"]",
                "processing": "@StringLocalizer["Processing"]",
                "infoFiltered": "(@StringLocalizer["Filtered"] @StringLocalizer["From"] _MAX_ total @StringLocalizer["EntriesDatatable"])",
                "info": "@StringLocalizer["Showing"] _START_ @StringLocalizer["To"] _END_ @StringLocalizer["OfDatatable"] _TOTAL_ @StringLocalizer["EntriesDatatable"]",
                "infoEmpty": "@StringLocalizer["Showing"] 0 @StringLocalizer["OfDatatable"] 0 @StringLocalizer["EntriesDatatable"]",
                "paginate": {
                    first: "@StringLocalizer["First"]",
                    last: "@StringLocalizer["Last"]",
                    next: "@StringLocalizer["Next"]",
                    previous: "@StringLocalizer["Previous"]",
                },
            },
        });
    }

    const modal = document.getElementById("modal")

    function GetTrainingPlans(filter) {
        $("#table_id2").DataTable({
            ajax: {
                url: "MyZone/GetTrainingPlans?filter=" + filter,
                type: "GET",
                dataType: "json",
            },
            columns: [
                { "data": "modality" },
                { "data": "name" },
                { "data": "description" },
                { "data": "trainer" },
                {
                    "title": '@StringLocalizer["Details"].Value',
                    "data": null,
                    "render": function (data, type, row, meta) {
                        return `<a href=/Plans/TrainingDetails/${data.planId} style="color:white; border-radius: 10px; background-color: #00639A; border-color: #00639A; padding: 6px 12px; text-decoration:none;">@StringLocalizer["See"]</a>`;
                    }
                }
            ],
            destroy: true,
            responsive: true,
            "searching": false,
            "ordering": false,
            "paging": false,
            "dom": 't',
            "info": false,
            language: {
                "lengthMenu": "@StringLocalizer["Show"] _MENU_ @StringLocalizer["EntriesDatatable"]",
                "emptyTable": "@StringLocalizer["EmptyMessage"]",
                "search": "@StringLocalizer["Search"]",
                "zeroRecords": "@StringLocalizer["NoMatching"]",
                "processing": "@StringLocalizer["Processing"]",
                "infoFiltered": "(@StringLocalizer["Filtered"] @StringLocalizer["From"] _MAX_ total @StringLocalizer["EntriesDatatable"])",
                "info": "@StringLocalizer["Showing"] _START_ @StringLocalizer["To"] _END_ @StringLocalizer["OfDatatable"] _TOTAL_ @StringLocalizer["EntriesDatatable"]",
                "infoEmpty": "@StringLocalizer["Showing"] 0 @StringLocalizer["OfDatatable"] 0 @StringLocalizer["EntriesDatatable"]",
                "paginate": {
                    first: "@StringLocalizer["First"]",
                    last: "@StringLocalizer["Last"]",
                    next: "@StringLocalizer["Next"]",
                    previous: "@StringLocalizer["Previous"]",
                },
            },
        });
    }

    function GetMealPlans(filter) {
        $("#table_id3").DataTable({
            ajax: {
                url: "/MyZone/GetMealPlans/?filter=" + filter,
                type: "GET",
                dataType: "json",
            },
            columns: [
                { "data": "name" },
                { "data": "description" },
                { "data": "trainer" },
                {
                    "title": '@StringLocalizer["Details"].Value',
                    "data": null,
                    "render": function (data, type, row, meta) {
                        return `<a href=/Plans/MealDetails/${data.planId} style="color:white; border-radius: 10px; background-color: #00639A; border-color: #00639A; padding: 6px 12px; text-decoration:none;">@StringLocalizer["See"]</a>`;
                    }
                }
            ],
            destroy: true,
            responsive: true,
            "searching": false,
            "ordering": false,
            "paging": false,
            "dom": 't',
            "info": false,
            language: {
                "lengthMenu": "@StringLocalizer["Show"] _MENU_ @StringLocalizer["EntriesDatatable"]",
                "emptyTable": "@StringLocalizer["EmptyMessage"]",
                "search": "@StringLocalizer["Search"]",
                "zeroRecords": "@StringLocalizer["NoMatching"]",
                "processing": "@StringLocalizer["Processing"]",
                "infoFiltered": "(@StringLocalizer["Filtered"] @StringLocalizer["From"] _MAX_ total @StringLocalizer["EntriesDatatable"])",
                "info": "@StringLocalizer["Showing"] _START_ @StringLocalizer["To"] _END_ @StringLocalizer["OfDatatable"] _TOTAL_ @StringLocalizer["EntriesDatatable"]",
                "infoEmpty": "@StringLocalizer["Showing"] 0 @StringLocalizer["OfDatatable"] 0 @StringLocalizer["EntriesDatatable"]",
                "paginate": {
                    first: "@StringLocalizer["First"]",
                    last: "@StringLocalizer["Last"]",
                    next: "@StringLocalizer["Next"]",
                    previous: "@StringLocalizer["Previous"]",
                },
            },
        });
    }

    function GetGoalPlans(filter) {
        $("#table_id5").DataTable({
            ajax: {
                url: "/MyZone/GetGoals/?filter=" + filter,
                type: "GET",
                dataType: "json",
            },
            columns: [
                { "data": "name" },
                {
                    "data": "endDate",
                    "render": function (data, type, row, meta) {
                        if (type === 'display') {
                            const date = new Date(data);
                            const formattedDate = `${date.toLocaleDateString()} ${date.toLocaleTimeString()}`;
                            return formattedDate;
                        } else {
                            return data;
                        }
                    }
                },
                {
                    "title": '',
                    "data": null,
                    "render": function (data, type, row, meta) {
                        if (!data.isCompleted) {
                            return `<a onclick="CompleteGoal(${data.goalId})" style="cursor: pointer; color:white; border-radius: 10px; background-color: #00639A; border-color: #00639A; padding: 6px 12px; text-decoration:none; float:right;">@StringLocalizer["Complete"]</a>`;
                        } else {
                            return "";
                        }
                    }
                }
            ],
            destroy: true,
            responsive: true,
            "searching": false,
            "ordering": false,
            "paging": false,
            "dom": 't',
            "info": false,
            language: {
                "lengthMenu": "@StringLocalizer["Show"] _MENU_ @StringLocalizer["EntriesDatatable"]",
                "emptyTable": "@StringLocalizer["EmptyMessage"]",
                "search": "@StringLocalizer["Search"]",
                "zeroRecords": "@StringLocalizer["NoMatching"]",
                "processing": "@StringLocalizer["Processing"]",
                "infoFiltered": "(@StringLocalizer["Filtered"] @StringLocalizer["From"] _MAX_ total @StringLocalizer["EntriesDatatable"])",
                "info": "@StringLocalizer["Showing"] _START_ @StringLocalizer["To"] _END_ @StringLocalizer["OfDatatable"] _TOTAL_ @StringLocalizer["EntriesDatatable"]",
                "infoEmpty": "@StringLocalizer["Showing"] 0 @StringLocalizer["OfDatatable"] 0 @StringLocalizer["EntriesDatatable"]",
                "paginate": {
                    first: "@StringLocalizer["First"]",
                    last: "@StringLocalizer["Last"]",
                    next: "@StringLocalizer["Next"]",
                    previous: "@StringLocalizer["Previous"]",
                },
            },
        });
    }

    function CompleteGoal(idGoal) {
        $.ajax({
            url: "/Plans/CompleteGoal",
            type: "POST",
            dataType: "json",
            data: { id: idGoal },
            success: function () {
                // a meta foi concluída com sucesso
                ClearFilterGoals();
            },
            error: function () {
                // ocorreu um erro ao tentar concluir a meta

            }
        })
    }

    function ClearFilterGoals() {
        $('input[name="filterTrainingPlans"]').prop('checked', false);
        GetGoalPlans(0);
    }

    window.onclick = function (event) {
        if (event.target == modal) {
            $("#modal").hide();
        }
    }

    function closeToast() {
        $(".toast").hide();
    }

    function toggleModal() {
        $("#modal").show();
    }

    function toggleRemoveModal() {
        $("#modal1").show();
    }

    function handleUpload(event, fileType) {
        let allowedTypes = fileType === 'image' ? ['jpg', 'jpeg', 'png'] : ['pdf']
        let selectedFile = document.getElementById(`selectedFile${fileType === 'image' ? '' : 'ForEMD'}`).value
        let idxDot = selectedFile.lastIndexOf(".") + 1
        let extFile = selectedFile.substr(idxDot, selectedFile.length).toLowerCase()
        const savePend = '@Html.Raw(StringLocalizer["Pending_Save"].Value.ToString())'

        if (allowedTypes.includes(extFile)) {
            if (fileType === 'pdf') {
                document.getElementById('emdText').textContent = savePend
                document.getElementById('emd').className = "fa-solid fa-file fa-xl text-to-dark"
            }
            document.getElementById(fileType === 'image' ? 'profilePicture' : 'frame').src = window.URL.createObjectURL(event.files[0])
            document.getElementById(`btnRemove${fileType === 'image' ? 'Image' : 'EMD'}`).classList.remove("invisible")
            document.getElementById("saveInsertEmd").style.display = "block";
        } else {
            document.getElementById(`selectedFile${fileType === 'image' ? '' : 'ForEMD'}`).value = null
            //alert(only + ' ' + `${allowedTypes.join('/')}` + '' + allow); //falta traduzir
            $(".toast").show();
            document.getElementById('alertText').innerHTML = "only" + ' ' + `${allowedTypes.join('/')}` + ' ' + "allowed";
            document.getElementById("saveInsertEmd").style.display = "none";
        }
    }

    function removeFile(fileType) {
        const removePend = '@Html.Raw(StringLocalizer["Pending_Remove"].Value.ToString())'
        const placeholder = "https://cdn.scmanagement.me/public/user_placeholder.png"

        let fileElement = document.getElementById(`selectedFile${fileType === 'image' ? '' : 'ForEMD'}`)
        let removeButton = document.getElementById(`btnRemove${fileType === 'image' ? 'Image' : 'EMD'}`)

        if (fileType === 'pdf') {
            document.getElementById('emd').className = "fa-solid fa-file fa-xl text-to-dark invisible"
            document.getElementById('emdText').textContent = removePend
            $("#modal").hide();
            document.getElementById("saveInsertEmd").style.display = "block";
        }
        else {
            document.getElementById('profilePicture').src = placeholder
        }
        fileElement.value = ""
        removeButton.classList.add("invisible")
        document.getElementById(`remove${fileType === 'image' ? 'Image' : 'EMD'}`).value = true
        $('#modal1').hide()
    }

    const buildTimeline = async () => {
        let training = await loadTrainingPlans("3")
        let meals = await loadMealsPlans("3")
        let goals = await loadGoals("3")

        let allData = [
            ...training.map(f => ({
                start: new Date(f.startDate),
                end: new Date(f.endDate),
                content: f.name,
                group: "Training",
                id: `training-${f.planId}`,
                originalId: f.planId,
                style: "cursor: pointer; background-color: #00639A; color:white;",
                className: "trainingItems"
            })),
            ...meals.map(f => ({
                start: new Date(f.startDate),
                end: new Date(f.endDate),
                content: f.name,
                group: "Meal",
                id: `meal-${f.planId}`,
                originalId: f.planId,
                style: "cursor: pointer; background-color: #004870; color:white;"
            })),
            ...goals.map(f => ({
                start: new Date(f.startDate),
                end: new Date(f.endDate),
                content: f.name,
                group: "Goal",
                id: `goal-${f.goalId}`,
                originalId: f.goalId,
                style: "cursor: pointer; background-color: #6fb6de; color:white;"
            }))
        ]

        let container = document.getElementById('timeline');

        let items = new vis.DataSet(allData);

        let options = {
            "locale": "@ViewBag.Lang.Substring(0,2)"
        };

        let groups = [
            {
                id: "Training",
                content: '@HtmlLocalizer["Training Plan"]',
            },
            {
                id: "Meal",
                content: '@HtmlLocalizer["Meal Plan"]'
            },
            {
                id: "Goal",
                content: '@HtmlLocalizer["Goals"]'
            }
        ]

        let timeline = new vis.Timeline(container, items, groups, options);

        document.getElementById('timeline').onclick = function (event) {
            const props = timeline.getEventProperties(event)
            if (props.item == null) return
            const item = allData.find(f => f.id === props.item)
            window.open(`/Plans/${item.group}Details/${item.originalId}`, '_blank')
        }

        timeline.on("changed", () => {
            let visText = document.getElementsByClassName("vis-text")
            let theme = localStorage.getItem("theme")

            if (visText) {
                for (let i = 0; i < visText.length; i++) {
                    visText[i].classList.add('text-to-dark');
                    if (theme == "dark") {
                        visText[i].style.color = 'white';
                    } else {
                        visText[i].style.color = 'black';
                    }
                }
            }
        })
    }

    function getDateOneMonthAgo() {
        const date = new Date();
        date.setMonth(date.getMonth() - 1);
        return date;
    }

    function getDateOneMonthFromNow() {
        const date = new Date();
        date.setMonth(date.getMonth() + 1);
        return date;
    }

    function loadMealsPlans(filter) {
        return new Promise((resolve, reject) => {
            $.ajax({
                type: 'GET',
                url: `/MyZone/GetMealPlans/?filter=${filter}`,
                datatype: "json",
                success: function (data) {
                    resolve(data.data)
                },
                error: function (error) {
                    reject(error)
                },
            })
        })
    }

    function loadTrainingPlans(filter) {
        return new Promise((resolve, reject) => {
            $.ajax({
                type: 'GET',
                url: `/MyZone/GetTrainingPlans/?filter=${filter}`,
                datatype: "json",
                success: function (data) {
                    resolve(data.data)
                },
                error: function (error) {
                    reject(error)
                },
            })
        })
    }

    function loadGoals(filter) {
        return new Promise((resolve, reject) => {
            $.ajax({
                type: 'GET',
                url: `/MyZone/GetGoals/?filter=${filter}`,
                datatype: "json",
                success: function (data) {
                    resolve(data.data)
                },
                error: function (error) {
                    reject(error)
                },
            })
        })
    }

</script>
