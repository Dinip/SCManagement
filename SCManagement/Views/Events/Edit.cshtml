@model SCManagement.Models.Event
@inject IStringLocalizer<SharedResource> StringLocalizer

@{
    ViewData["Title"] = "Edit";
}

<script src="https://api.tiles.mapbox.com/mapbox-gl-js/v2.12.0/mapbox-gl.js"></script>
<link href="https://api.tiles.mapbox.com/mapbox-gl-js/v2.12.0/mapbox-gl.css"
      rel="stylesheet" />
<!-- Import Mapbox GL Draw -->
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.0/mapbox-gl-draw.js"></script>
<link rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-draw/v1.4.0/mapbox-gl-draw.css"
      type="text/css" />
<!-- Import Mapbox GL JS  -->
<script src="https://api.tiles.mapbox.com/mapbox-gl-js/v2.12.0/mapbox-gl.js"></script>
<link href="https://api.tiles.mapbox.com/mapbox-gl-js/v2.12.0/mapbox-gl.css"
      rel="stylesheet" />
<script src="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.min.js"></script>
<link rel="stylesheet"
      href="https://api.mapbox.com/mapbox-gl-js/plugins/mapbox-gl-geocoder/v5.0.0/mapbox-gl-geocoder.css"
      type="text/css" />
<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.3/dist/leaflet.css"
      integrity="sha256-kLaT2GOSpHechhsozzB+flnD+zUyjE2LlfWPgU04xyI="
      crossorigin="" />


<h1>Edit</h1>

<h4>Event</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Id" />
            <div class="form-group">
                <label asp-for="Name" class="control-label"></label>
                <input asp-for="Name" class="form-control" />
                <span asp-validation-for="Name" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="StartDate" class="control-label"></label>
                <input asp-for="StartDate" id="startDateTime" class="form-control" onchange="HaveDiferentDate()" />
                <span asp-validation-for="StartDate" class="text-danger" id="spanStartDate"></span>
                <span class="text-danger" id="spanStartDateError" style="display:none">Essa data não é permitida</span>
            </div>
            <div class="form-group">
                <label asp-for="EndDate" class="control-label"></label>
                <input asp-for="EndDate" id="endDateTime" class="form-control" onchange="HaveDiferentDate()" />
                <span asp-validation-for="EndDate" class="text-danger"></span>
                <span class="text-danger" id="spanEndDateError" style="display:none">Essa data não é permitida</span>
            </div>

            <div class="form-group">
                <label asp-for="EnrollLimitDate" class="control-label"></label>
                <input asp-for="EnrollLimitDate" class="form-control" id="EnrollLimitDate" onchange="CheckLimitEnrollDate()" />
                <span asp-validation-for="EnrollLimitDate" class="text-danger"></span>
                <span class="text-danger" id="spanLimiteEnrollError" style="display:none">O limite de inscrição não pode exceder a data de inicio do evento</span>
            </div>
            
            <div class="form-group">
                <label asp-for="Details" class="control-label"></label>
                <input asp-for="Details" class="form-control" />
                <span asp-validation-for="Details" class="text-danger"></span>
            </div>
            <div class="form-group form-check">
                <label class="form-check-label">
                    <input class="form-check-input" asp-for="IsPublic" /> @Html.DisplayNameFor(model => model.IsPublic)
                </label>
            </div>
            <div class="form-group">
                <label asp-for="Fee" class="control-label"></label>
                <input type="number" step="0.01" min="0" asp-for="Fee" class="form-control" value="0" readonly="@(ViewBag.ValidKey == false)" />
                <span asp-validation-for="Fee" class="text-danger"></span>
                <span style="color: orange;">@(ViewBag.ValidKey == false ? StringLocalizer["Warning_InvalidKey"] : "")</span>
            </div>
            <div class="form-group">
                <label asp-for="MaxEventEnrolls" class="control-label"></label>
                <input asp-for="MaxEventEnrolls" class="form-control" />
                <span asp-validation-for="MaxEventEnrolls" class="text-danger"></span>
            </div>

            
            <div class="form-group">
                <label asp-for="EventResultType" class="control-label"></label>
                <select asp-for="EventResultType" class="form-control" asp-items="ViewBag.EventResultType"></select>
                <span asp-validation-for="EventResultType" class="text-danger"></span>
            </div>


            <div id="LocationContainer" class="form-group"> 
                <a id="btnAddLocation" onclick="AddLocation()" class="form-check-input">Inserir Lococalização</a>
                <input asp-for="Location" type="hidden" id="Location" />

                @if (@Model.LocationId != null && Model.Location != null)
                {                   
                        <span id="spanStreet">@Model.Location.Street, </span>
                        <span>@Model.Location.City, </span>
                        <span>@Model.Location.Country, </span>
                        <span>@Model.Location.ZipCode</span>
                }
            </div>

                <input asp-for="Route" type="hidden" class="form-control" id="ev" />

            <div class="form-group form-check">
                <label class="form-check-label">
                    <input id="ckbHaveRoute" class="form-check-input" asp-for="HaveRoute" onchange="ToggleMapBox()" /> @Html.DisplayNameFor(model => model.HaveRoute)
                </label>
            </div>

            <div id="AddressContainer" class="form-group">
                <label asp-for="AddressByPath" class="control-label"></label>
                <input asp-for="AddressByPath" readonly class="form-control" id="AddressByPath" />
            </div>


            <br /> <br />
            <input type="hidden" class="form-control" id="path" value="@((Model.Route != null) ? Model.Route : "null")" />

            <div id="cardMapBox">
                <div class="card card-to-dark col-xs-12 col-sm-12 col-md-7 mt-sm-5 mt-5 mt-lg-0 mt-md-0" style="min-height:400px; min-width:1000px;">
                    <div class="card-body">
                        <div id='map'></div>
                        <div id="menu">
                        </div>
                        <div id="save">
                            <button type="button" id="save-button">Save</button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index">Back to List</a>
</div>



<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script src="~/js/InitialConfigMapBox.js" asp-append-version="true"></script>

<script>
    window.onload = function(){
        ToggleMapBox();
        var ckbHaveRoute = document.getElementById("ckbHaveRoute");
        if(ckbhaveRoute.checked)
        {
            PathMapBoxConfig();
        }
    }
    

    function ToggleMapBox() {
        var mapBox = document.getElementById("cardMapBox");
        var addressContainer = document.getElementById("AddressContainer");
        var locationContainer = document.getElementById("LocationContainer");
        var ckbHaveRoute = document.getElementById("ckbHaveRoute");

        var spanStreet = document.getElementById("spanStreet");
        var btnAddLocation = document.getElementById("btnAddLocation");


        if (ckbHaveRoute.checked == true) {
            mapBox.style.display = "block";
            addressContainer.style.display = "block";
            locationContainer.style.display = "none";

            document.getElementById("ev").value = null;
            document.getElementById("AddressByPath").value = null;
            document.getElementById("map").innerHTML = "";
            //Load MapBox
            PathMapBoxConfig();
        }
        else {
            mapBox.style.display = "none";
            addressContainer.style.display = "none";
            locationContainer.style.display = "block";

            document.getElementById("ev").value = null;
            document.getElementById("AddressByPath").value = null;
            document.getElementById("map").innerHTML = "";

            if(spanStreet.innerHTML != null){
                btnAddLocation.innerHTML = "Atualizar Localização"
            }else{
                btnAddLocation.innerHTML = "Inserir Localização"
            }

            

        }
    }

    function AddLocation(){
        var mapBox = document.getElementById("cardMapBox");
        var addressContainer = document.getElementById("AddressContainer");
        var locationContainer = document.getElementById("LocationContainer");

        mapBox.style.display = "block";
        //addressContainer.style.display = "block";
        locationContainer.style.display = "none";

        SearchMapBoxConfig();
    }


    function HaveDiferentDate() {
        var startDateTime = document.getElementById("startDateTime");
        var endDateTime = document.getElementById("endDateTime");
            
            var spanStartError = document.getElementById("spanStartDateError")
            var spanEndError = document.getElementById("spanEndDateError")
            var dateNow = new Date();
            var checkStartDate = new Date(startDateTime.value)
            var checkEndDate = new Date(endDateTime.value)


            if (checkStartDate < dateNow) {
                spanStartError.style.display = "block";
                startDateTime.value = dateNow;
                return;
            }else{
                spanStartError.style.display = "none";
            }

            if(checkEndDate < checkStartDate){
                spanEndError.style.display = "block";
                endDateTime.value = dateNow;
                return;
            } else {
                spanEndError.style.display = "none";
            }
        

    }

    function CheckLimitEnrollDate() {
        var startDateTime = document.getElementById("startDateTime");
        var EnrollLimitDate = document.getElementById("EnrollLimitDate");
        var spanLimiteEnrollError = document.getElementById("spanLimiteEnrollError");

        var startDate = new Date(startDateTime.value);
        var enrollDate = new Date(EnrollLimitDate.value);

        if (enrollDate > startDate) {
            spanLimiteEnrollError.style.display = "block"
            EnrollLimitDate.value = new Date();
        } else {
            spanLimiteEnrollError.style.display = "none"
        }


    }
</script>

<style>
    #map {
        position: absolute;
        top: 0;
        bottom: 0;
        width: 100%;
        left: 0;
        border-radius: 20px;
        height: 100%
    }

    .mapboxgl-canvas-container {
        height: 100vh;
    }

    #save {
        position: absolute;
        background: #efefef;
        padding: 10px;
        font-family: 'Open Sans', sans-serif;
        right: 10%;
        top: 10%;
    }
</style>

@section Scripts {
    @{await Html.RenderPartialAsync("_ValidationScriptsPartial");}
}
